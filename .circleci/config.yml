# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

Orbs:
  aws-cli:  circleci/aws-cli@2.0.3
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command:  |
            aws cloudformation delete-stack --stack-name  myStack-${CIRCLE_WORKFLOW_ID:0:5} 
jobs:
  #configure_infrastructure:
    #docker:
      #- image:  python:3.7-alpine3.11
    #steps:
      #- checkout
      #- add_ssh_keys:
          #fingerprints: ["a6:95:44:bd:93:ef:aa:68:d3:04:70:5b:c8:63:9e:53"]
      #- run:
          #name: Install Ansible
          #command:  |
            #apk add --update ansible
      #- run:
          #name: Run Playbook and Configure Server
          #command:  |
            #ansible-playbook  -i  inventory.txt main-one.yml

  #smoke_test:
    #docker:
      #- image:  alpine:latest
    #steps:
      #- run: apk add --update curl
      #- run:
          #name: smoke test
          #command:  |
            #URL="https://blog.udacity.com/"
            #if curl -s --head ${URL}
            #then
              #return 0
            #else
              #return 1
            #fi

  #create_infrastructure:
    #docker:
      #- image:  amazon/aws-cli
    #steps:
      #- checkout
      #- run:
          #name: Create CloudFormation Stack
          #command:  |
            #aws cloudformation deploy \
              #--template-file template.yml  \
              #--stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}  \
              #--region us-east-1
      #- run:  return 1
      #- destroy_environment

  #create_and_deploy_frontend:
    #docker:
      #- image:  amazon/aws-cli
    #steps:
      #- checkout
      #- run:
          #name: Execute bucket.yml - Create CloudFormation Stack
          #command:  |
            #aws cloudformation deploy \
            #--template-file bucket.yml  \
            #--stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:5}  \
            #--parameter-overrides SageIykeBucket="iyke-lesson-4-bucket-${CIRCLE_WORKFLOW_ID:0:5}"
      #- run:
          #aws s3 sync . s3://iyke-lesson-4-bucket-${CIRCLE_WORKFLOW_ID:0:5} --delete
  
      #- run:
          #name: Test job
          #Fail the job intentionally to simulate an error
          #command:  return 1
      #- destroy_environment

  #get_last_deployment_id:
    #docker:
      #- image:  amazon/aws-cli
    #steps:
      #- checkout
      #- run: yum install -y tar gzip
      #- run:
          #name: Fetch and save the old pipeline ID (Bucket name) responsible for the last release
          #command:  |
            #aws cloudformation \
            #list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            #--no-paginate --output text > ~/textfile.txt
      #- persist_to_workspace:
          #root: ~/
          #paths:
            #- textfile.txt
  
  promote_to_production:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command:  |
            aws cloudformation deploy \
            --template-file cloudfront.yml  \
            --stack-name sage-distro \
            --parameter-overrides PipelineID="iyke-lesson-4-bucket-${CIRCLE_WORKFLOW_ID:0:7}"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-workflow:
    jobs:
      #- create_infrastructure
      #- configure_infrastructure
      #- smoke_test
          #requires:
            #- create_infrastructure
      #- create_and_deploy_frontend
      - promote_to_production
          #requires:
            #- create_and_deploy_frontend
      #- get_last_deployment_id
      #- clean-up_old_frontend:
          #requires:
            #- get_last_deployment_id
            #- romote_to_production